TODO
- Implement surface positionning relative to a ramp
- Add support for loading embedded LZW encoded bmp files (very seldom, just one identified in the full example table)
- JP's Star Trek has a wrong texture positionning (panel above ramp)
- Support 'active' (i.e. non opaque bake) objects for the occluder selection
- Layback lattice breaks the split normals: we should rotate them accordingly when this is toggled


- rewrite nestmap padding using a clean object mask (it is mainly broken for the moment since it rely on alpha which is not reliable or missing)
- fix VPX in order to be able to use a playfield_mesh for the playfield (to get the correct physics setup for playfield)
- fix wire ramp in TZ getting optimized out
- fix HDR range scaling


Rewrite the documentation with a step by step guide (and corresponding vpx/blend files):
. Step 1: installation & quick walk through
x Step 2: baking the blank table
. Step 3: adding a light
. Step 4: syncing with LampZ
. Step 5: adding a flasher
. Step 6: adding an insert & 'bake to' feature
. Step 7: transparent parts & 'bake mask' feature
. Step 8: better playfield with 3D wood
. Step 9: 3D inserts


VPX potential optimizations 
- Unshaded path can be more efficient (single tex fetch) => Tested, 1.5ms speedup on a 22ms render time on a GTX650. Is it really worth the effort ?
- HDR texture should be half float (64b instead of 128b) to improve cache hit and limit memory bandwidth consumption (but HDR is not working anyway due to DX9 downscaling the texture)






Closed items:
- fix 3.1 / 3.2 rendering modes (see LampPost mod in TZ) => lights where not unlinked after 3.2 rendering, before 3.1 mode
- Merge lightmaps based on user setup => no filter on move script even for group bakes
- Automatically add an invisible playfield_mesh if missing (instead of warning about it)
- Support baking spinner (backface = mirrored frontface)
- fix visibile map borders when lightmap pruning (extend 1px)
- Support merging lightmaps of static parts like playfield and parts
- Shade edges of lightmap pruned face to black when rendering nestmaps to limit lightmaps seams at runtime => simplified by adjusting lightmaps
- Nestmap algo: when needing to remove a big block, try to replace with small ones (needs to keep track of incompatible blocks and prevent recreating these selection groups)
- Extend lightmp pruned faces and mark edges of the pruned face for smoother fading
- Avoid using fake user for the core node groups
- When loading library, update existing node groups instead of skipping them => no, this could break the blend file
- Move the core assets to the asset library instead of loading them directly => no
- Include an asset folder, register it as an asset library when the plugin is activated, populate with additional assets (screws, bulbs, posts, inserts, materials,...)
- Import VPX scene lights (like for the blank table)
- Perform lightmap pruning by render group for better handling of object overlays
- When importing plastics wall, create 2 meshes: one for the plastic with a plastic shader (enlarged for the bevelling to be visible), one for the image (bpy.ops.mesh.solidify(thickness=-0.01), invert selection and delete, then scale back on z axis) => no
- Evaluate the opportunity of an automatic POV dependent LOD algorithm (keep the shape, remove the internal vertices base on a projected pix threshold, or simply apply a decimate modifier based on the projected surface/number of tris) => simple LOD implemented, based on Blender's decimate
- Update core parts library with latest inserts model (with bottom light cap, and included reflectors)
- Update core parts library for screws with either low poly bake targets, or low poly normal mapped version of the models
- Update core parts library with a 3D plywood that actually match plywood of a pinball
- Add glow map baking (camera space post process bake) => now that light HDR is clean, can't we just live with VPX bloom ? => no more needed, result is ok with LDR scaling + bloom + upper insert light
- Add a user configurable way of stopping modifier application when baking (for the moment hardcoded to stop on fine bevelling) => Now it's a NoExp marker in the modifier name
- Layer separator must be hidden when not rendering its translucent object => add a link to it and implement => implemented in 'Bake Mask' feature
- Hide lights (make them not visible, VPX updated commited => needs VPX update since fading is only performed on visible light at the moment) => included in the helper script, not added to the export since it is not in VPX UI and can be quite confusing
- VPX Optimizations: Lights are always rendered (eventually bulb, then additive bulb). Discards: not visible, intensity = 0, color & color2 = Black
- Use Blender 3.2 light groups to render all the light scenario at once. This does not support multiple world (world can set to a light group though), and this has to be looked more deeply for light scenario using meshes (emitters or occluders). This could decrease the render time by a factor 10.
- Add clean nestmap padding for opaque objects using the nearest opaque color
- Compute and use the HDR range of the used part of the render, not the one of the full render
- Lights are rendered to the light buffer if they have transmission scale => turn it to 0 on export
- Generate an helper vbs file (instead of putting it inside the script
- Add support for UV projected movables that follow the same path but generate their own mesh even for lightmaps
- Rewrite Packmap generation for higher quality (renders should stay untouched, since they guarantee the higher possible quality) => only possible with custom nesting algorithm
  . Constrain rotation to 0/90/180/270
  . Guarantee a scale of 1 (by iterative packing, disabling all scaling)
  . Build packmap by data transfer (RGBA pixel data copy using a padded mask), not rendering which may cause bluriness (unaligned pixels and loose precision on borders)
- When baking, perform sanity checks: Check for collection off => not needed anymore after rewrite
- Simplify the core materials, they can be done with simple Principled BSDF => not that important (they are not supposed ot be really used, and they work)
- Evaluate performing HDR with multiple lightmap (1 for 0-1, then 1 for 1-256) => moved lightmap to EXR
- Implement 'Movable' bake mode (each object is baked to a separate mesh, keeping its origin) => not kept. For complex movables, manual adjusted baking will be required anyway. So don't go down a too complex path
  . Object must be UV unwrapped, and must have either a VLM.BakeTex node in its material (first slot) or has an imported VPX image (bake will be the same size as the image)
  . Light map are computed on the UV unwrapped model, filtered based on a custom threshold
  . Implementation progress:
    x At group step, just hide them
    . At render step, set them to hide/indirect for others, then adapt material (create VLM.BakeTex if missing, same size as VPX Texture) perform a bake for each movable/light scenarios, also compute light threshold of the bake and allow to access it from the UI (for easy adjustment of the lighmap bake threshold)
    . At mesh step, copy the movables to bake result and generate a light mesh for each on the lightmap above threshold
    . At packmap step, copy bakes to export (with exr to png/webp conversion)
    . At export step, include them in the VPX and produce sync code
- Rewrite VBS fader to apply a fading curve based on filament temperature, adapting color (K to RGB) and intensity (using the HDR part, to view filament cooling down in flashers :)) => just plug in Lampz or the table fading system
- Unhide objects when creating packmaps to avoid error => won't be needed with pack nest
- Allow the user to select the final tonemapping => not needed anymore, tonemapping removed (done by VPX)
- Identify static/active bake and export accordingly (done for opacity, missing for under playfield which, I think, need to be marked as active)
- VPX: implement HDR for primitive (very simple, same as flasher)
- In a split light group, bake same VPX lights together
- Occluder selection tools delete compositor nodes... Save them and restore them afterward
- Add the ability to bake additional environment lighting as additive lighting (base bake = dark pub or even no IBL, then additional for lit up room)
- Add support for multiple object to be baked to the same target (for example a simple playfield mesh which holds the bake of the playfield, cut outs, and inserts)
- Add support for using different scales: vpx/inches/cm
- When loading library, update existing node groups instead of reimporting them => now they are skipped (updating would be better)
- When baking packmap, apply adjusted tonemapping to get correct color after tonemapping in VPX
- Check that tonemapping is applied to playfield bake (I don't think it is) => ok for bake mode (anyway, this is supposed to be replaced by NestPacker)
- Split reflection flag between mesh baking (for keeping playfield oriented faces) and exporting (for activating reflection of lightmaps)
- Add an option to disable AOI for selected lights
- don't hide trigger wire
- Don't save depth of renders
- Allow to mark VPX objects as baked without having them in a bake group (when objects are merged for example)
- Apply layback lattice transform when performing UV projection (or clearly state that lattice is not supported by the process)
- Fix pruned faces for sub pixel faces of lightmaps
- Find a way to take in account text overlay with clean alpha borders
- Link multiple object to one bake (for clean export)
- Import fixed view node groups, rename all core node groups as VLM. / VPX.
- Set bake camera pos to Fixed view node groups
- Add black wood bump to JP 13
- Add some scracthes to JP 13
- When baking, check for compositor node setup
- Make 'Bake Target' Collection not renderable
- Improve lighting of JP 13 (all to black, then adjust all insert spots)
- Toggle indirect only for indirect call when baking
- Check why JP 13 stops on bake mesh generation
- Add support for traditional baking the playfield (using view dependent shading) instead of render baking
- Add support for AOI on emissive mesh (sphere bounds of box bounds, then emission power to radiu heuristic)
- Remove overlay as a preprocess/postprocess and integrate it directly in the render
- Recreate the base VPX Material, using only Principled BSDF, with gamma corrected plastic translucency
- Move away from the 'overlay' approach, using a traditional 'bake to' system
  . Overlay should be regular bake objects (rendered), with a bake target (used as mesh targets)
  . At Render stage, render the bake object (eventually mask him with the alpha of the bake target for better borders)
  . At Mesh stage, use the bake target mesh instead of the bake object
  . UI integration: add a 'bake to' field for bake objects PointerProperty(name="Bake To", type=bpy.types.Object), don't render bake to targets
- Add an option to take in account VPX playfield reflection (export with reflection flag, adapt backface culling for the reflected ray)
